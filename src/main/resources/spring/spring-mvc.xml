<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd">

    <!--spring MVC 相关配置-->

    <!-- 打开注解 激活spring基于注解的DI -->
    <context:annotation-config />

    <!-- 扫描识别包下包含的注解类 @Controller -->
    <context:component-scan base-package="com.spring.mvc">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- HandleMapping 无需配置，spring mvc 默认启动 -->
    <!--扩展了注解驱动，可以将请求参数绑定到控制器参数-->
    <!--conversion-service 配置自定义converter-->
    <mvc:annotation-driven/>
    <!--<mvc:annotation-driven conversion-service="customConversionService"/>-->

    <!-- 访问 静态资源 css js images -->
    <mvc:resources mapping="/resources/**" location="/resources/"/>

    <!--由Converter工厂配置自定义转换器-->
    <!--spring 内置3中类型转换器接口，分别是
        Converter<S,T>
        ConverterFactory<S,R>
        GenericConverter
        自定义的类型转换器必须实现其中一个-->
    <!--org.springframework.context.support.ConversionServiceFactoryBean 用于绑定converter-->
    <!--org.springframework.format.support.FormattingConversionServiceFactoryBean 绑定converter和formatter都可以-->
    <!--如果formatters和converters 都配置了  会执行formatters里面的方法，converters失效了-->
    <bean id="customConversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
        <property name="converters">
            <set>
                <bean class="org.springframework.core.convert.support.StringToBooleanConverter"/>
                <bean class="com.spring.mvc.converter.MyConverter"/>
            </set>
        </property>
        <!--<property name="formatters">-->
        <!--<set>-->
        <!--<bean class="com.spring.mvc.demo.formatter.MyFormatters"/>-->
        <!--</set>-->
        <!--</property>-->
    </bean>

    <!--全局过滤器 配置-->
    <!--可以形成一个拦截器链，拦截器的执行顺序是按声明的先后顺序执行的，
                    先声明的拦截器中的preHandle方法会先执行，
                    然而它的postHandle方法和afterCompletion方法却会后执行-->
    <mvc:interceptors>
        <!--拦截所有请求-->
        <bean class="com.spring.mvc.interceptor.HelloInterceptor"/>
        <mvc:interceptor>
            <!--需要进行拦截的请求路径-->
            <mvc:mapping path="/user/list"/>
            <bean class="com.spring.mvc.interceptor.UserInterceptor" />
        </mvc:interceptor>
    </mvc:interceptors>

    <!--&lt;!&ndash;配置ViewResolver，可以使用多个，使用order属性进行排序&ndash;&gt;-->
    <!--<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">-->
    <!--<property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>-->
    <!--<property name="prefix" value="/WEB-INF/views/"/>-->
    <!--<property name="suffix" value=".jsp"/>-->
    <!--</bean>-->

    <bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
        <property name="mediaTypes">
            <value>
                html=text/html
                json=application/json
                xml=application/xml
            </value>
        </property>
        <property name="defaultContentType" value="text/html"/>
    </bean>

    <!--根据路径的后缀选择不同的视图-->
    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="order" value="0"/>
        <property name="contentNegotiationManager" ref="contentNegotiationManager"/>
        <property name="viewResolvers">
            <list>
                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <!--prefix是前缀  suffix是后缀  响应是 /WEB-INF/views/xxx/.jsp-->
                    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/views/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <!--<bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" />-->
                <bean class="com.alibaba.fastjson.support.spring.FastJsonJsonView">
                    <property name="charset" value="UTF-8"/>
                </bean>
            </list>
        </property>
    </bean>

    <bean class="com.alibaba.fastjson.support.spring.FastJsonHttpMessageConverter"/>

    <!--文件上传-->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <property name="maxUploadSize" value="209715200"/>
        <property name="defaultEncoding" value="UTF-8"/>
        <property name="resolveLazily" value="true"/>
    </bean>

    <!-- 映射根目录，所访问的页面 -->
    <!--如果index.jsp没有的话就要配置进入 -->
     <mvc:view-controller path="/" view-name="index"/>
    <mvc:view-controller path="/login/init" view-name="login/login"/>
    <mvc:view-controller path="/user/addInit" view-name="user/userAdd"/>
</beans>